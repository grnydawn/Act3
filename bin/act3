#!/usr/bin/python

import sys
import os.path
import signal

SCRIPT_NAME = os.path.basename(__file__)
ACT3_HOME = '%s/..'%os.path.dirname(os.path.realpath(__file__))
EXTERNAL_DIR = ACT3_HOME + '/external'
WEBSERVER_DIR = ACT3_HOME + '/webserver'
SVCDB_DIR = ACT3_HOME + '/serviceDB'
KNWDB_DIR = ACT3_HOME + '/knowledgeDB'
USERDB_DIR = ACT3_HOME + '/userDB'
LOCALCOMP_DIR = ACT3_HOME + '/localcomp'
XFORMER_DIR = ACT3_HOME + '/xformer'

# Python version check
if sys.hexversion < 0x020700F0:
    print 'ERROR: %s works with Python Version 2.7 or later.'%SCRIPT_NAME
    sys.exit(-1)

sys.path.insert(0, EXTERNAL_DIR)
sys.path.insert(1, SVCDB_DIR)
sys.path.insert(2, KNWDB_DIR)
sys.path.insert(3, USERDB_DIR)
sys.path.insert(4, LOCALCOMP_DIR)
sys.path.insert(5, XFORMER_DIR)
sys.path.insert(6, WEBSERVER_DIR)

from doit.loader import generate_tasks
from doit.doit_cmd import DoitMain
from doit.cmd_base import TaskLoader

from Pyro4 import naming, locateNS

class CustomTaskLoader(TaskLoader):
    """create test tasks on the fly based on cmd-line arguments"""
    DOIT_CONFIG = {
        'verbosity': 2,
        'continue': True,
        'dep_file': os.path.join('%s/bin'%ACT3_HOME, '.%s.db'%SCRIPT_NAME),
        'num_process': 1,
        }

    def __init__(self):
        self.jobs = {}
        print 'ACT3: STARTED'

    def __del__(self):
        for appname, job in self.jobs.items():
            job.terminate()
        for appname, job in self.jobs.items():
            job.join()
        print 'ACT3: FINISHED'

    def run_background(self, appname, func):
        import multiprocessing

        p = multiprocessing.Process(target=func)
        self.jobs[appname] = func
        p.start()

    def dummy(self):
        print 'WORKED!!!'

    def check_NS(self):
        try:
            ns = locateNS()
            return True
        except: return False

    def gentask_start_nameserver(self):

        task = {}
        task['name'] = 'start_nameserver'
        task['uptodate'] = [self.check_NS]
        task['actions'] = [(self.run_background, ['nameserver', naming.main], None)]
        return task

    def gentask_start_serviceDB(self):
        import act3_svcdb

        task = {}
        task['name'] = 'start_serviceDB'
        #task['task_dep'] = ['ACT3:start_nameserver']
        task['actions'] = [(self.run_background, ['svcdb', act3_svcdb.main], None)]
        return task

    def gentask_start_knowledgeDB(self):
        import act3_knwdb

        task = {}
        task['name'] = 'start_knowledgeDB'
        #task['task_dep'] = ['ACT3:start_serviceDB']
        task['actions'] = [(self.run_background, ['knwdb', act3_knwdb.main], None)]
        return task

    def gentask_start_userDB(self):
        import act3_userdb

        task = {}
        task['name'] = 'start_userDB'
        #task['task_dep'] = ['ACT3:start_knowledgeDB']
        task['actions'] = [(self.run_background, ['userdb', act3_userdb.main], None)]
        return task

    def gentask_start_localcomp(self):
        import act3_localcomp

        task = {}
        task['name'] = 'start_localcomp'
        #task['task_dep'] = ['ACT3:start_userDB']
        task['actions'] = [(self.run_background, ['localcomp', act3_localcomp.main], None)]
        return task

    def gentask_start_xformer(self):
        import act3_xformer

        task = {}
        task['name'] = 'start_xformer'
        #task['task_dep'] = ['ACT3:start_localcomp']
        task['actions'] = [(self.run_background, ['xformer', act3_xformer.main], None)]
        return task

    def gentask_start_webserver(self):
        import act3_webserver

        task = {}
        task['name'] = 'start_webserver'
        #task['task_dep'] = ['ACT3:start_xformer']
        #task['file_dep'] = ['%s/CMakeLists.txt'%MASHM_HOME]
        #task['targets'] = [MASHM_HOME]
        #task['actions'] = ['python %s/Pyro4/naming.py'%EXTERNAL_DIR]
        task['actions'] = [(self.run_background, ['webserver', act3_webserver.start], None)]
        return task

    def _gen_tasks(self):
        yield self.gentask_start_nameserver()
        yield self.gentask_start_serviceDB()
        yield self.gentask_start_knowledgeDB()
        yield self.gentask_start_userDB()
        yield self.gentask_start_localcomp()
        yield self.gentask_start_xformer()
        yield self.gentask_start_webserver()

    def load_tasks(self, cmd, params, args):
        """implements loader interface, return (tasks, config)"""
        return generate_tasks('ACT3', self._gen_tasks()), self.DOIT_CONFIG


if __name__ == "__main__":
    doit_main = DoitMain(CustomTaskLoader())

    def signal_handler(signal, frame):
        global doit_main
        if doit_main:
            del doit_main
            sys.exit(0)
    signal.signal(signal.SIGINT, signal_handler)

    sys.exit(doit_main.run(['run']))


